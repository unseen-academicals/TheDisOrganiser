---
- name: Build Security Group
  block:

    - name: Check for existing security group
      amazon.aws.ec2_group_info:
        region: "{{ region }}"
        filters:
          group-name: "{{ security_group_name }}"
      register: sg_info
      failed_when: sg_info.security_groups | length == 0

    - name: Set security group ID
      set_fact:
        sg_id: "{{ sg_info.security_groups[0].group_id }}"

  rescue:

    - name: Create security group
      amazon.aws.ec2_group:
        name: "{{ security_group_name }}"
        description: Allow SSH, HTTP, and HTTPS access
        region: "{{ region }}"
        rules:
          - proto: tcp
            ports: [22, 80, 443, 5000]
            cidr_ip: 0.0.0.0/0
        rules_egress:
          - proto: -1
            cidr_ip: 0.0.0.0/0
        state: present
      register: created_sg

    - name: Set created security group ID
      set_fact:
        sg_id: "{{ created_sg.group_id }}"


- name: Build EC2
  block:

- name: Ensure key pair exists
  amazon.aws.ec2_key:
    name: "{{ key_name }}"
    state: present
  register: key_check
  failed_when: key_check.changed  # No implicit creation, must pre-exist


  rescue:

    - name: Get latest Debian AMI
      amazon.aws.ec2_ami_info:
        owners: ['136693071363']
        filters:
          name: "debian-11*"
          architecture: "x86_64"
          root-device-type: "ebs"
        region: "{{ region }}"
      register: debian_ami

    - name: Set latest Debian AMI ID
      set_fact:
        ami_id: "{{ (debian_ami.images | sort(attribute='creation_date'))[-1].image_id }}"

    - name: Check if key pair exists
  amazon.aws.ec2_key_info:
    names: ["{{ key_name }}"]
    region: "{{ region }}"
  register: key_check
  failed_when: key_check.key_pairs | length == 0


    - name: Launch EC2 instance
      amazon.aws.ec2_instance:
        region: "{{ region }}"
        instance_type: "{{ instance_type }}"
        image_id: "{{ ami_id }}"
        key_name: "{{ key_name }}"
        security_group: "{{ security_group_name }}"
        count: 1
        wait: true
        tags:
          Name: "{{ instance_name }}"
          Resource: "{{ tag_name }}"
      when: instance_info.instances | length == 0

- name: Ensure EC2 instance is running
  block:

    - name: Get EC2 instance state
      amazon.aws.ec2_instance_info:
        region: "{{ region }}"
        filters:
          tag:Name: "{{ instance_name }}"
      register: ec2_info

    - name: Start EC2 instance if it is stopped
      amazon.aws.ec2_instance:
        instance_ids: "{{ ec2_info.instances[0].instance_id }}"
        region: "{{ region }}"
        state: running
      when: ec2_info.instances[0].state.name != 'running'

- name: Get instance public IP
  amazon.aws.ec2_instance_info:
    region: "{{ region }}"
    filters:
      tag:Name: "{{ instance_name }}"
      instance-state-name: running
  register: instance_data

- name: Add the EC2 instance to the inventory dynamically
  add_host:
    name: "{{ instance_data.instances[0].public_dns_name }}"
    ansible_host: "{{ instance_data.instances[0].public_ip_address }}"
    groups: dynamic_ec2

- name: Wait for 1 minute
  ansible.builtin.pause:
    seconds: 60